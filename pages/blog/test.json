[
    {
        "slug": "t cop",
        "published": "the_moka_p",
        "updated": "the_moka_p",
        "body": "<p>These are exciting times in Ember! With Ember Octane just around the corner, native class support has <a href=\"https://emberjs.com/blog/2018/12/13/ember-3-6-released.html#toc_new-features-2\">officially landed in v3.6</a> (with a <a href=\"https://github.com/pzuraq/ember-native-class-polyfill\">polyfill</a> supporting v3.4+), and the <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md\">Decorators RFC</a> has been merged and will be implemented soon (pending decorators moving to stage 3 in the January meeting). Some time ago, I wrote <a href=\"https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e\">an article</a> that detailed how to use native classes in Ember, along with best practices for writing them. Since then, some major changes have occured, and I wanted to give a quick update for early adopters and folks who are curious about them in general.</p>\n<p>This post will focus on changes since the original article and current best practices.  We&#39;ll be talking about:</p>\n<ul>\n<li><a href=\"#nativeclassconstructorupdaterfc\">The Native Class Constructor Update RFC</a></li>\n<li><a href=\"#newvscreate\"><code>new</code> vs. <code>create</code></a></li>\n<li><a href=\"#constructorvsinit\"><code>constructor</code> vs. <code>init</code></a></li>\n<li><a href=\"#classfieldsvsextend\">Class Fields vs. <code>extend()</code></a></li>\n<li><a href=\"#avoidclassfieldarrowfunctions\">Avoid Class Field Arrow Functions</a></li>\n<li><a href=\"#supervssuper\"><code>super</code> vs. <code>_super()</code></a></li>\n<li><a href=\"#whenitsoktouseextend\">When It&#39;s Ok to Use <code>extend()</code></a></li>\n<li><a href=\"#avoidingreopenandreopenclass\">Avoiding <code>reopen</code> and <code>reopenClass</code></a></li>\n<li><a href=\"#avoidingemberobject\">Avoiding <code>EmberObject</code></a></li>\n<li><a href=\"#miscclasstips\">Misc. Class Tips</a></li>\n</ul>\n<p>If you&#39;re new to native classes in Ember, the most comprehensive and up-to-date documentation is the <a href=\"https://ember-decorators.github.io/ember-decorators/docs/native-class-basics\">official Ember Decorators documentation site</a>, where you can find a detailed guide to all of the differences in native classes and an overview of native class features. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">MDN documentation on classes</a> is also a great resource for learning more about the basics of native classes and how things like inheritance in Javascript work in the first place (spoiler: it&#39;s sometimes just a <em>little</em> bit confusing).</p>\n<p>Alright, without further ado, let&#39;s get this inaugural blog post started!</p>\n<h2 id=\"native-class-constructor-update-rfc\">Native Class Constructor Update RFC</h2>\n<p>After the <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md\">original ES Class RFC</a> was merged, it became clear that there were some major ergonomic issues with the behavior of <code>EmberObject</code>&#39;s constructor. Specifically, the behavior led to default values always overwriting values passed to <code>create</code> (as discussed in the <a href=\"https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e#96a9\">Class Fields section</a> of the original article). This behavior was a constant stumbling block for new and current Ember users alike, so we made a <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0337-native-class-constructor-update.md\">second RFC</a> that updated <code>EmberObject</code> to assign values passed in <em>last</em>.</p>\n<p>This means that many of the workarounds that were used to assign class fields before are <em>no longer necessary</em> 🎉. It is now best practice to assign default values to class fields:</p>\n<pre><code class=\"language-js\">// before\nclass Person extends EmberObject {\n  firstName = this.firstName || &#39;Bruce&#39;;\n  lastName = this.lastName || &#39;Wayne&#39;;\n}\n\nclass Person extends EmberObject {\n  firstName = _.defaultTo(this.firstName, &#39;Bruce&#39;);\n  lastName = _.defaultTo(this.lastName, &#39;Wayne&#39;);\n}\n\nclass Person extends EmberObject {\n  @argument firstName = &#39;Bruce&#39;;\n  @argument lastName = &#39;Wayne&#39;;\n}\n\n// after\nclass Person extends EmberObject {\n  firstName = &#39;Bruce&#39;;\n  lastName = &#39;Wayne&#39;;\n}\n</code></pre>\n<h2 id=\"new-vs-create\"><code>new</code> vs. <code>create</code></h2>\n<p>As a consequence of the constructor update RFC, creating an instance of a class using <code>new EmberObject()</code> was made impossible. This was never a <em>public</em> API, but did work previously, and some users had begun using it this way. For classes that extend <code>EmberObject</code>, you should continue to use <code>create()</code>:</p>\n<pre><code class=\"language-js\">class Person extends EmberObject {\n  firstName = &#39;Bruce&#39;;\n  lastName = &#39;Wayne&#39;;\n}\n\nlet person = Person.create({\n  firstName: &#39;Carol&#39;,\n  lastName: &#39;Danvers&#39;\n});\n</code></pre>\n<p>It&#39;s important to note that this <strong>only applies to classes that extend <code>EmberObject</code></strong>! For classes that do not, you should define your own constructor and use <code>new</code>:</p>\n<pre><code class=\"language-js\">class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n\nlet person = new Person(&#39;Carol&#39;, &#39;Danvers&#39;);\n</code></pre>\n<h2 id=\"constructor-vs-init\"><code>constructor</code> vs. <code>init</code></h2>\n<p>There were also two changes to the behavior of the <code>constructor</code> method in classes that extend <code>EmberObject</code>:</p>\n<ol>\n<li>Injections are no longer available</li>\n<li>Create params are no longer available</li>\n</ol>\n<p>These both get assigned <em>after</em> the object has been fully created, but <em>before</em> <code>init</code> is called. So, they are both available in <code>init</code>. The official recommendation is to always use <code>init</code> when extending from any <code>EmberObject</code> based classes, since it will consistently have everything needed.</p>\n<pre><code class=\"language-js\">// before\nclass Profile extends Component {\n  @service store;\n\n  // argument\n  person = this.person || null;\n\n  constructor() {\n    super(...arguments);\n    let details = this.store.queryRecord(&#39;details&#39;, this.person.id);\n  }\n}\n\n// after\nclass Profile extends Component {\n  @service store;\n\n  // argument\n  person = null;\n\n  init() {\n    super.init(...arguments);\n    let details = this.store.queryRecord(&#39;details&#39;, this.person.id);\n  }\n}\n</code></pre>\n<h2 id=\"class-fields-vs-extend\">Class Fields vs. <code>extend()</code></h2>\n<p>When extending using <code>extend()</code>, all values that were passed in to the method were assigned to the <em>prototype</em> of the class.</p>\n<pre><code class=\"language-js\">const Person = EmberObject.extend({\n  sayHello() {\n    console.log(&#39;hi!&#39;);\n  },\n\n  friends: [],\n});\n\nconsole.log(Person.prototype.hasOwnProperty(&#39;sayHello&#39;)); // true\nconsole.log(Person.prototype.hasOwnProperty(&#39;friends&#39;)); // true\n</code></pre>\n<p>This led to the infamous &quot;shared state&quot; problem, where an object or array passed into a class definition would be shared between every instance of that class:</p>\n<pre><code class=\"language-js\">let peterParker = Person.create();\nlet wandaMaximoff = Person.create();\n\npeterParker.friends.push(&#39;Tony Stark&#39;);\n\nconsole.log(wandaMaximoff.friends); // [&#39;Tony Stark&#39;]\n</code></pre>\n<p>By contrast, when using <code>class ... extends</code>, only <em>methods</em> and\n<em>getters/setters</em> are assigned to the prototype. Class fields are assigned to the\n<em>instance</em> of the class:</p>\n<pre><code class=\"language-js\">class Person extends EmberObject {\n  sayHello() {\n    console.log(&#39;hi!&#39;);\n  }\n\n  friends = []\n}\n\nconsole.log(Person.prototype.hasOwnProperty(&#39;sayHello&#39;)); // true\nconsole.log(Person.prototype.hasOwnProperty(&#39;friends&#39;)); // false\n\nlet peterParker = Person.create();\n\nconsole.log(peterParker.hasOwnProperty(&#39;sayHello&#39;)) // false\nconsole.log(peterParker.hasOwnProperty(&#39;friends&#39;)) // true\n</code></pre>\n<p>One common pattern that existed to avoid the shared state problem in classic classes was assigning values in the <code>init</code> hook of the class. With native class fields this is <em>not</em> an issue. Class fields are assigned a new copy of their value for every instance, which means that there is no accidental sharing of state. The current best practice is to move any property assignments in <code>init</code> to class fields:</p>\n<pre><code class=\"language-js\">// before\nconst Person = EmberObject.extend({\n  init() {\n    this.friends = [];\n  }\n});\n\n// after\nclass Person extends EmberObject {\n  friends = [];\n}\n</code></pre>\n<p>One exception here is when you are assigning a value that was passed into the class constructor, for classes that do <em>not</em> extend <code>EmberObject</code>, or when you are defining a value based on <em>other</em> values:</p>\n<pre><code class=\"language-js\">class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n\nclass Person {\n  firstName = &#39;Thor&#39;;\n  lastName = &#39;Odinson&#39;;\n\n  constructor() {\n    // fullName is based on firstName and lastName, so\n    // it should be assigned in the constructor\n    this.fullName = `${this.firstName} ${this.lastName}`;\n  }\n}\n</code></pre>\n<p>The other exception is for static values that <em>should</em> be constant. Creating a new instance of the value for each instance of the class is <em>usually</em> a good thing, but in some cases this can be really bad for performance. For example, if you ever used the <code>layout</code> property to create a &quot;single file component&quot; with <code>ember-cli-handlebars-inline-precompile</code>, this will now create a new template per instance! This is why we created the <code>@layout</code> decorator in <code>ember-decorators</code>:</p>\n<pre><code class=\"language-js\">import Component from &#39;@ember/component&#39;;\nimport { layout } from &#39;@ember-decorators/component&#39;;\nimport hbs from &#39;htmlbars-inline-precompile&#39;;\n\n// before\nexport default Component.extend({\n  // assigns the layout once to the prototype, so it&#39;s ok 👍\n  layout: hbs`{{this.firstName}} {{this.lastName}}`,\n});\n\n// bad!\nexport default class PersonComponent extends Component {\n  // creates a new instance of the layout for every component! 🛑\n  layout = hbs`{{this.firstName}} {{this.lastName}}`;\n}\n\n// after\n// creates one instance of the layout, and assigns it to the class 💯\n@layout(hbs`{{this.firstName}} {{this.lastName}}`)\nexport default class PersonComponent extends Component {}\n</code></pre>\n<p>In cases where other types of values are static like this, consider create constants instead.</p>\n<h2 id=\"avoid-class-field-arrow-functions\">Avoid Class Field Arrow Functions</h2>\n<p>This one is more of a general native classes rule, rather than an Ember specific one. However, it is a pattern that is becoming more and more common, and it&#39;s something that should be avoided. Specifically, developers in the wider Javascript community are using arrow functions to create bound instance methods on a class for things like event handlers:</p>\n<pre><code class=\"language-js\">// do not copy this. This is an antipattern!\nclass Checkbox {\n  onClick = () =&gt; {\n    // handle click\n  };\n\n  constructor(element) {\n    this.element = element;\n\n    this.element.addEventListener(&#39;click&#39;, this.onClick);\n  }\n}\n</code></pre>\n<p>The reasons why this is problematic include:</p>\n<ol>\n<li>It breaks inheritance and super, since class fields overwrite each other as the class is constructed</li>\n<li><code>arguments</code> does not behave the same as a normal method</li>\n<li>It&#39;s difficult to mock in tests, since you can&#39;t change the function on the prototype of the class.</li>\n</ol>\n<p>For more details, check out <a href=\"https://github.com/mbrowne/bound-decorator/blob/master/MOTIVATION.md\">this rationale</a> on the official decorators proposal.</p>\n<p>Instead, you can use the <code>@action</code> decorator provided by Ember (and Ember Decorators), which binds a the handler lazily:</p>\n<pre><code class=\"language-js\">class Checkbox {\n  @action\n  onClick() {\n    // handle click\n  };\n\n  constructor(element) {\n    this.element = element;\n\n    this.element.addEventListener(&#39;click&#39;, this.onClick);\n  }\n}\n</code></pre>\n<h2 id=\"super-vs-_super\"><code>super</code> vs. <code>_super()</code></h2>\n<p>When using native classes, you should <em>never</em> use <code>this._super()</code>. Unfortunately, there is not currently an assertion that prevents this (although we would like to add one), but there is a <a href=\"https://github.com/ember-cli/eslint-plugin-ember/blob/master/docs/rules/no-ember-super-in-es-classes.md\">linting rule</a> included with eslint-plugin-ember.</p>\n<p>All instances of calls to <code>this._super()</code> can be replaced instead with the <code>super</code> keyword. <code>super</code> works a little bit differently than <code>this._super()</code> though. When called in a constructor, you use it directly:</p>\n<pre><code class=\"language-js\">class Car extends Vehicle {\n  constructor() {\n    super(...arguments);\n\n    this.wheels = 4;\n  }\n}\n</code></pre>\n<p>It&#39;s actually a syntax error if you don&#39;t use <code>super</code> this way in constructors. However, when not used from the constructor, <code>super</code> gives access to <em>all</em> of the parent class&#39;s instance properties and methods, and you must call the method on it explicitly:</p>\n<pre><code class=\"language-js\">class Car extends Vehicle {\n  start() {\n    super.start(...arguments);\n\n    this.currentGear = &#39;drive&#39;;\n  }\n}\n</code></pre>\n<p>You can even call <em>other</em> inherited methods using this, which is why you must specify it in the first place:</p>\n<pre><code class=\"language-js\">class Car extends Vehicle {\n  start() {\n    super.ignition(...arguments);\n\n    this.currentGear = &#39;drive&#39;;\n  }\n}\n</code></pre>\n<p>This design choice for <code>super</code> was really about embracing the nature of Javascript&#39;s prototypical inheritance, instead of choosing to mimic other languages like Java that have different inheritance patterns.</p>\n<p>Finally, as with classic classes, you should generally pass all arguments through to the super calls for existing lifecycle hooks:</p>\n<pre><code class=\"language-js\">class MultiSelectComponent extends Component {\n  didInsertElement() {\n    super.didInsertElement(...arguments);\n\n    // setup component element\n  }\n}\n</code></pre>\n<h2 id=\"when-its-ok-to-use-extend\">When It&#39;s Ok to Use <code>extend()</code></h2>\n<p>One major part of the original classes RFC was ensuring that native classes that extend from <code>EmberObject</code> would be able to interoperate with classic class syntax, meaning that you would be able to continue using <code>.extend()</code> with them, without having to worry if a particular class was defined using native syntax or not. This was also the answer to how mixins would interoperate with native classes, since they don&#39;t have a native equivalent yet.</p>\n<p>However, it is also possible to use this feature in other ways, some of which have become antipatterns over time. For instance, <code>ember-cli-typescript</code> has recommended that users define their classes like so:</p>\n<pre><code class=\"language-ts\">// do not copy this. This is an antipattern!\nexport default class PersonComponent extends Component.extend({\n  fullName: computed(&#39;firstName&#39;, &#39;lastName&#39;, {\n    get() {\n      return `${this.firstName} ${this.lastName}`;\n    },\n  }),\n}) {\n  firstName = &#39;Diana&#39;;\n  lastName = &#39;Prince&#39;;\n}\n</code></pre>\n<p>This recommendation was made because the future of decorators in Ember was unclear at the time, and the Ember Typescript team wanted to ensure that users could write <em>safe</em> code that wouldn&#39;t break at some point in the future. This was entirely reasonable, and really the best decision they could make at the time - this code is rock solid and <em>will not break</em> or need to be updated until Ember v4 at the earliest (yay stability)!</p>\n<p>However, now that the Decorators RFC has been accepted, and <code>ember-decorators</code> has converted to matching the behavior of the RFC, this pattern is no longer ideal. In fact, it will be harder to convert going forward, since the <a href=\"https://github.com/scalvert/ember-es6-class-codemod\">native class codemod</a> currently does not support this style of syntax - though it would definitely be possible to add, and we would love contributions!</p>\n<p>So coming back to the original question - when should you use <code>.extend()</code>? There are only two cases where you should:</p>\n<ol>\n<li><p>When you are passing mixins to a class defined with native class syntax:</p>\n<pre><code class=\"language-js\">export default class PersonComponent extends Component.extend(\n  FullNameMixin,\n  OtherMixin\n) {\n  firstName = &#39;Diana&#39;;\n  lastName = &#39;Prince&#39;;\n}\n</code></pre>\n</li>\n<li><p>When you are using classic class syntax to define a class:</p>\n<pre><code class=\"language-js\">export default Component.extend({\n  fullName: computed({\n    get() {\n      return `${this.firstName} ${this.lastName}`;\n    }\n  }),\n\n  firstName: &#39;Diana&#39;,\n  lastName: &#39;Prince&#39;,\n});\n</code></pre>\n</li>\n</ol>\n<p>We&#39;re working on <a href=\"https://github.com/scalvert/eslint-plugin-ember-es6-class/issues/4\">a linting rule</a> that will prevent this as well, but unfortunately this is not something we can assert against in Ember itself. In any case, you should definitely avoid mixing the two styles in all circumstances.</p>\n<h2 id=\"avoiding-reopen-and-reopenclass\">Avoiding <code>.reopen()</code> and <code>.reopenClass()</code></h2>\n<p>Native classes don&#39;t <em>really</em> have equivalents to <code>EmberObject</code>s ability to reopen class definitions willy-nilly and mess around with internals. You can patch class prototypes <em>directly</em>, but that&#39;s a much messier process in general, and that&#39;s a <em>good</em> thing - it turns out being able to completely redefine classes arbitrarily is not a great idea 🙃</p>\n<p>However, there are legitimate use cases. In general, if you are relying on this behavior, you should <em>first</em> try to find a way to refactor off of it without touching prototypes, constructors, etc. In the case of <code>.reopenClass()</code>, this will often times be as simple as adding <code>static</code> class fields and methods to the class definition, since that&#39;s almost always what the method is used for:</p>\n<pre><code class=\"language-js\">// before\nexport default Component.extend({}).reopenClass({\n  positionalParams: [&#39;title&#39;, &#39;body&#39;]\n});\n\n// after\nexport default class BlogPostComponent extends Component {\n  static positionalParams = [&#39;title&#39;, &#39;body&#39;];\n}\n</code></pre>\n<p>In the cases where you <em>can&#39;t</em> easily refactor away from <code>.reopen()</code> or <code>.reopenClass()</code>, it&#39;s generally recommended that you <em>do</em> keep using them. Prototypes are <em>hard</em> (as I&#39;ve personally learned <em>many</em> times throughout this process), and <code>EmberObject</code> and its methods are not deprecated, so they&#39;ll continue working for some time to come. You can take your time to think of better ways to refactor away from them, there&#39;s no rush!</p>\n<h2 id=\"avoiding-emberobject\">Avoiding <code>EmberObject</code></h2>\n<p>Alright, so after reading through all of that you may be thinking &quot;that is a <em>lot</em> to remember&quot;, and you would be right. <code>EmberObject</code> works well with native classes, but there definitely are some oddities such as having to use <code>init</code> instead of <code>constructor</code>, <code>create</code> instead of <code>new</code>, etc. that may be hard to keep track of. If you&#39;d prefer to <em>not</em> have to deal with these things, you actually can <em>opt-out</em> today!</p>\n<p>All of Ember&#39;s decorators are completely compatible with <em>plain</em> native classes. There is absolutely no need to extend <code>EmberObject</code>, and in fact it should be considered best practice to <em>avoid</em> <code>EmberObject</code> whenever possible:</p>\n<pre><code class=\"language-js\">// before\nclass Person extends EmberObject {\n  firstName = null;\n  lastName = null;\n\n  @computed(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet person = Person.create({\n  firstName: &#39;Carol&#39;,\n  lastName: &#39;Danvers&#39;\n});\n\n// after\nclass Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  @computed(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet person = new Person(&#39;Carol&#39;, &#39;Danvers&#39;);\n</code></pre>\n<p>This means that any utility classes written using <code>EmberObject</code> can be rewritten and converted away from it. In fact, you should only need to remember the rules in this post for <em>framework primitives</em>, such as:</p>\n<ul>\n<li>Ember<ul>\n<li><code>@ember/component</code></li>\n<li><code>@ember/controller</code></li>\n<li><code>@ember/helper</code></li>\n<li><code>@ember/route</code></li>\n<li><code>@ember/service</code></li>\n</ul>\n</li>\n<li>Ember Data<ul>\n<li><code>@ember-data/adapter</code></li>\n<li><code>@ember-data/model</code></li>\n<li><code>@ember-data/serializer</code></li>\n</ul>\n</li>\n</ul>\n<p><code>@glimmer/component</code>, which was just accepted via RFC, will be implemented <em>without</em> extending <code>EmberObject</code> which means you will not need to remember the rules and exceptions for newer components either. In general, when in doubt, use native classes!</p>\n<h2 id=\"misc-class-tips\">Misc. Class Tips</h2>\n<p>This section is for a few remaining tips/best practices that I have developed myself in using native classes. These recommendations are from my own personal experience, so take what you will from them.</p>\n<h3 id=\"always-give-you-class-a-name\">Always give you class a name!</h3>\n<p>Anonymous classes are a thing in JS:</p>\n<pre><code class=\"language-js\">export default class {\n\n}\n</code></pre>\n<p>While this may seem nice, if you do this everywhere it means that you&#39;re going to have hundreds of the same indistinguishable classes when you&#39;re trying to debug, especially in the memory debugger 😱 It also makes your codebase much less searchable. Always add a name, even if it seems redundant!</p>\n<h3 id=\"type-your-framework-class-names\">Type your (framework) class names</h3>\n<p>In my experience, it generally makes sense to add the <em>framework</em> type of a class to its name as well. That is, if it is a <em>Route</em>, <em>Controller</em>, <em>Component</em>, or <em>Service</em>, you would want to name it <code>UserRoute</code>, <code>UserController</code>, <code>UserComponent</code>, or <code>UserService</code> respectively so you don&#39;t have 4 different classes named <code>User</code>!</p>\n<p>This is less of a hard and fast rule though. It generally doesn&#39;t make sense for Models for instance (<code>UserModel</code> sounds meh) or various utility classes. And if you prefer being able to omit <code>Component</code> from the name of every single component, maybe they&#39;re generally clear enough without it! Still, the fact that Routes and Controllers have so much overlap suggests you&#39;ll probably want to distinguish them, and for some reason I just feel the urge to add <code>Service</code> to the end of all my services.</p>\n<p>Note that this only applies to <em>class names</em>, appending the type to the end of file names is definitely not a good idea.</p>\n<h3 id=\"dont-rely-on-class-field-assignment-order\">Don&#39;t rely on class field assignment order</h3>\n<p>Class fields get assigned in order, from top to bottom. This means that it&#39;s entirely possible for a class field to rely on the values of <em>other</em> class fields:</p>\n<pre><code class=\"language-js\">class Person {\n  firstName = &#39;Tony&#39;;\n  lastName = &#39;Stark&#39;;\n\n  fullName = `${this.firstName} ${this.lastName}`;\n}\n</code></pre>\n<p>This is a bad idea because it makes your class harder to refactor. Moving a field around can break your class in unexpected ways, and it might take minute to figure out what&#39;s going on. Class fields definitely <em>read</em> declaratively, and the fact that they <em>do</em> have an assignment order is actually rather odd in that sense - intuitively, you might expect them to all exist at once, like assigments on an object literal.</p>\n<p>Note that this really only applies to class fields - once you&#39;re in a &quot;hook&quot; of some kind, like the <code>constructor</code> or <code>init</code>, it&#39;s safe to start using values. This is because moving the constructor around is safe, and functions are pretty easy to reason about locally (usually 😬):</p>\n<pre><code class=\"language-js\">// EmberObject based class\nimport Component from &#39;@ember/component&#39;;\n\nclass Person extends Component {\n  init() {\n    super.init(...arguments);\n    this.fullName = `${this.firstName} ${this.lastName}`;\n  }\n\n  firstName = &#39;Tony&#39;;\n  lastName = &#39;Stark&#39;;\n}\n\n// standard native classes\nclass Person {\n  constructor() {\n    this.fullName = `${this.firstName} ${this.lastName}`;\n  }\n\n  firstName = &#39;Tony&#39;;\n  lastName = &#39;Stark&#39;;\n}\n</code></pre>\n<p>Generally, derived state like this is handled better by getters/setters, so this should be avoided if possible by using those.</p>\n<h2 id=\"additional-resources\">Additional Resources</h2>\n<ul>\n<li><a href=\"https://ember-decorators.github.io/ember-decorators/docs/native-class-basics\">Ember Decorators Guides</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">MDN Class Documentation</a></li>\n<li><a href=\"https://github.com/scalvert/ember-es6-class-codemod\">The Native Class Codemod (WIP)</a></li>\n<li><a href=\"https://github.com/scalvert/eslint-plugin-ember-es6-class\">Ember Native Class ESLint Plugin</a></li>\n</ul>\n<p>And that&#39;s all folks! If you have more questions, join the <a href=\"https://www.emberjs.com/community/\">Ember Discord</a> and ask away, the <code>#e-decorators</code>, <code>#e-typescript</code>, <code>#st-native-classes</code>, and <code>#st-octane</code> channels are all great places to get some advice. Thanks for reading!</p>\n",
        "title": "Ember.js Native Class Update: 2019(nbsp)Edition",
        "tagline": ""
    },
    {
        "slug": "",
        "published": "test.md",
        "updated": "test.md",
        "body": "<p>If you&#39;ve been paying attention in Ember lately you may have heard the term &quot;Octane&quot; floating around here and there recently, and wondered what all the excitement was about. It may seem like a bit of a big deal - and that&#39;s because it kind of is! It&#39;s Ember&#39;s first new <em>edition</em>, proposed in the <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0364-roadmap-2018.md\">Ember 2018 Roadmap</a>, and represents a major shift in the mental model behind Ember.js and Ember applications. In this series, I&#39;ll be diving into some of the new features that are part of Octane (specifically the ones that are part of the <em>browser</em> side of the framework) and giving a brief overview of how the feature works, and why the feature is being added. The features I&#39;m planning on discussing are:</p>\n<ul>\n<li><a href=\"/blog/coming-soon-in-ember-octane-part-1-native-classes/\">Native Classes (+Decorators)</a> <em>← this post</em></li>\n<li><a href=\"/blog/coming-soon-in-ember-octane-part-2-angle-brackets-and-named-arguments/\">Angle Brackets &amp; Named Arguments</a></li>\n<li><a href=\"/blog/coming-soon-in-ember-octane-part-3-tracked-properties/\">Tracked Properties</a></li>\n<li><a href=\"/blog/coming-soon-in-ember-octane-part-4-modifiers/\">Modifiers</a></li>\n<li><a href=\"/blog/coming-soon-in-ember-octane-part-5-glimmer-components/\">Glimmer Components</a></li>\n</ul>\n<p>There <em>are</em> more features that are part of Octane, such as Ember&#39;s new file system layout (also known as Module Unification), template imports, and other build improvements, but these are a bit out of my scope - I&#39;ve personally been focused on the story for developers in the browser, writing app and addon code, and how that&#39;s going to change.</p>\n<p>This series is aimed at existing Ember users, but if you&#39;re new to Ember or tried Ember a while ago and want to see how things are changing, I&#39;ll be providing context on the existing features as we go along. These posts won&#39;t be doing deep dives on all the edge cases of the functionality, they are moreso meant as an overview of what&#39;s coming. If you can&#39;t already tell, I&#39;m very excited about these new features and the future of Ember with them, and can&#39;t wait to see them land in master! So, let&#39;s dive in!</p>\n<h3 id=\"what-are-editions\">What Are Editions?</h3>\n<p>Before we move onto Native Classes, let&#39;s talk about Ember Editions really quickly. Not many other frameworks have an equivalent for Editions, and they may seem a little confusing at first. So, what are they?</p>\n<p>An Edition in Ember represents the culmination of all the changes that have happened in the framework since the last Edition. In a lot of other frameworks, this is like a new major version. It means we have significantly improved things, added new concepts and ideas, updated all the documentation and marketing materials, created new guides, battle-tested everything, and are confident that it is ready for mass adoption. In some ways, it&#39;s like a new release of a product version at a company - things have changed, and we&#39;re ready to blast out to the world that there&#39;s a whole &quot;new&quot; Ember!</p>\n<p>You might be asking yourself, why not just use SemVer&#39;s major versions to do this? Usually when a framework releases a new major version, there are new APIs and features and there&#39;s lots of buzz and excitement about that. So, why not just release Ember v4 and be done with it?</p>\n<p>The answer is in the way Ember treats and respects SemVer. We follow SemVer to the letter - patch versions include <em>only</em> bugfixes, minor versions include <em>only</em> new features and improvements, and major versions only <em>remove</em> deprecated APIs. No new features are <em>ever</em> introduced on a major Ember version. This makes updating your app much simpler - there&#39;s no need to rewrite a component or service, or update to the new ways of doing things, just remove the deprecated features (which issue console warnings when used) and you should be able to bump the version without problems.</p>\n<p>In this model, new features are introduced gradually over the course of a single major version, allowing users to adopt them incrementally. This is amazing for app maintenance - instead of having a new major version be released and having to go update everything all at once, you can do it one piece at a time, as the new things are released.</p>\n<p>However, because this is done incrementally it can also sometimes mean that the new experience isn&#39;t really all that polished. After all, the docs and guides have to continue supporting the existing features, and remain cohesive. Adding every new feature to them immediately could quickly make them overwhelming for new users. Additionally, sometimes features may be ready and complete in isolation, but really be part of a larger picture of new features that are still in the pipeline, and some folks would prefer to wait for all of the &quot;new world&quot; to land before adopting new features.</p>\n<p>Editions are Ember&#39;s way to message to the community that the framework has synchronized, that all (or most) of the new features have shipped, and that it&#39;s time to update and adopt the new features. It&#39;s a tool that allows us to continue to use SemVer to signal <em>compatibility</em> changes exclusively, and have a different tool for signaling <em>major updates and new features</em>. This allows us to keep our core value of stability without stagnation, and be able to show off cool new things at the same time!</p>\n<p>Alright, now let&#39;s move onto those new features in Octane!</p>\n<h2 id=\"native-classes-decorators\">Native Classes (+Decorators)</h2>\n<p>Native Javascript classes in Ember are near and dear to my heart. I first began exploring them almost 2 years ago now, when I first approached <a href=\"https://twitter.com/rwjblue\">@rwjblue</a> about the state of <a href=\"https://ember-decorators.github.io/ember-decorators/\">ember-decorators</a> (&quot;ember-computed-decorators&quot; at the time). I was tasked with building out our documentation internally, and wanted something more ergonomic than YUIDoc/JSDoc style tags and comments that required you to manually name and tag every single method, property, and parameter. I had heard from <a href=\"https://twitter.com/runspired\">@runspired</a> some time before that native classes actually <em>mostly</em> worked with Ember already, and just needed a little bit of finagling to get all the way there.</p>\n<p>It turned out that was half-true - native classes did work pretty well with Ember&#39;s own classes, but there were some pretty major changes we needed to make to get them to be just as ergonomic and usable as Ember&#39;s classic class syntax, which was beginning to look more and more dated by the day. These changes were ultimately <em>small</em>, but they were deep in the internals of Ember, and operating on them was an almost surgical process, with little room for error or regression.</p>\n<p>Today, native classes are fully supported in Ember, with a rock solid public API and well defined, ergonomic behavior. However, they are one of those features that are part of a larger picture, specifically they require <em>class fields and decorators</em> to be used effectively. Class fields are currently stage 3 in the TC39 process, which is generally supported by Ember for early adoption, but decorators remain at stage 2 after the January 2019 TC39 meeting. As we will discuss, decorators are crucial to using Native Classes effectively because Ember <em>has been using the decorator pattern all along</em>!</p>\n<p>We have plans to continue working with TC39, along with the other major users of decorators (TypeScript, Angular, Vue, MobX, etc) to standardize and stabilize the syntax enough for us to land them in the framework, and while that may end up being some time after EmberConf, we already have the <em>behavior</em> of decorators spec&#39;d out and implemented behind a feature flag. They will be available to play around with by EmberConf, so you&#39;ll be able to try them out with native classes to see how they work. If you&#39;re impatient, you can also always use <a href=\"https://ember-decorators.github.io/ember-decorators/\">ember-decorators</a>, which matches the behavior of the proposed decorators exactly.</p>\n<p>Enough background, let&#39;s move onto some demonstrations!</p>\n<h3 id=\"classes-in-action\">Classes in Action</h3>\n<p>Classes have existed since the very earliest versions of Ember, when it was still named SproutCore 2. Back in 2011, ES6 did not yet exist, and a true native class syntax wasn&#39;t even a remote possibility. Many frameworks ended up creating their own class-like wrappers around JavaScript&#39;s prototypical inheritance, Ember included. It looked very much like it looks today:</p>\n<pre><code class=\"language-js\">// A person class defined in Ember v1\nvar Person = Ember.Object.extend({\n  firstName: &#39;Steve&#39;,\n  lastName: &#39;Rogers&#39;,\n\n  fullName: function () {\n    return this.get(&#39;firstName&#39;) + &#39; &#39; + this.get(&#39;lastName&#39;);\n  }.property(&#39;firstName&#39;, &#39;lastName&#39;),\n\n  updateName: function (firstName, lastName) {\n    this.set(&#39;firstName&#39;, firstName);\n    this.set(&#39;lastName&#39;, lastName);\n  },\n});\n\n// Make an instance of the class, overriding default values\nlet phoenix = Person.create({ firstName: &#39;Jean&#39;, lastName: &#39;Gray&#39; });\n\n// A person class defined with current class syntax\nimport EmberObject, { computed } from &#39;@ember/object&#39;;\n\nconst Person = EmberObject.extend({\n  firstName: &#39;Steve&#39;,\n  lastName: &#39;Rogers&#39;,\n\n  fullName: computed(&#39;firstName&#39;, &#39;lastName&#39;, function () {\n    return `${this.firstName} ${this.lastName}`;\n  }),\n\n  updateName(firstName, lastName) {\n    this.set(&#39;firstName&#39;, firstName);\n    this.set(&#39;lastName&#39;, lastName);\n  },\n});\n\n// Make an instance of the class, overriding default values\nlet phoenix = Person.create({ firstName: &#39;Jean&#39;, lastName: &#39;Gray&#39; });\n</code></pre>\n<p>There are some noticeable differences here, but most of these are unrelated to changes in the class syntax. We now have the niceties of ES2018 such as template strings and object-method syntax, and we no longer need to use <code>get</code> to get values, but we do still need to use <code>set</code> (that&#39;s being addressed by a different feature, <em>tracked properties</em>, that I&#39;ll be discussing in a later post in this series). The only major change to the mechanics of classes is the change to the way we define computed properties - in the older style, we used the <code>.property()</code> notation which was available because we added it to <code>Function.prototype</code> (<strong>very much an antipattern!</strong>), and now we just use the <code>computed</code> function to wrap the getter directly.</p>\n<p>Let&#39;s take a look at what this looks like when converted to native classes:</p>\n<pre><code class=\"language-js\">import EmberObject, { computed } from &#39;@ember/object&#39;;\n\nclass Person extends EmberObject {\n  firstName = &#39;Steve&#39;;\n  lastName = &#39;Rogers&#39;;\n\n  @computed(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  updateName(firstName, lastName) {\n    this.set(&#39;firstName&#39;, firstName);\n    this.set(&#39;lastName&#39;, lastName);\n  }\n}\n\n// Make an instance of the class, overriding default values\nlet phoenix = Person.create({ firstName: &#39;Jean&#39;, lastName: &#39;Gray&#39; });\n</code></pre>\n<p>Now that&#39;s much cleaner! We have far fewer opening and closing brackets, and we&#39;re using the native <code>get fullName()</code> syntax to define the getter meaning we don&#39;t have to remember that funky <code>computed()</code> syntax. Computed properties are decorators now, and assigned values are class fields. In fact, we can go one step further - we don&#39;t even need to extend from <code>EmberObject</code> anymore:</p>\n<pre><code class=\"language-js\">import { computed, set } from &#39;@ember/object&#39;;\n\nclass Person {\n  firstName = &#39;Steve&#39;;\n  lastName = &#39;Rogers&#39;;\n\n  constructor(firstName, lastName) {\n    this.updateName(firstName, lastName);\n  }\n\n  @computed(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  updateName(firstName, lastName) {\n    set(this, &#39;firstName&#39;, firstName);\n    set(this, &#39;lastName&#39;, lastName);\n  }\n}\n\n// Make an instance of the class, overriding default values\nlet phoenix = new Person(&#39;Jean&#39;, &#39;Gray&#39;);\n</code></pre>\n<p>We can completely drop the weight of using Ember&#39;s legacy class system and rely solely on native classes this way. This is awesome! In the future this means we&#39;ll be able to remove a large chunk of Ember&#39;s legacy code and leverage the platform instead, making our apps faster to load and easier to write.</p>\n<p>Another thing you may have noticed in the above examples is that we&#39;re using the exact same import paths for everything, including <code>computed</code>. At first this may seem like a breaking change! How can <code>computed</code> be a modern class decorator <em>and</em> be used in classic class syntax, without breaking anything? Shouldn&#39;t it be imported from a different location or something? In fact, it doesn&#39;t need to be at all. <code>computed</code> is fully compatible with <em>both</em> classic classes and native classes, along with all existing computed property macros in Ember and the Ember addon ecosystem! This is perfectly valid syntax that will Just Work™️:</p>\n<pre><code class=\"language-js\">import EmberObject, { computed, set } from &#39;@ember/object&#39;;\n\nconst ClassicClassPerson = EmberObject.extend({\n  firstName: &#39;Steve&#39;,\n  lastName: &#39;Rogers&#39;,\n\n  fullName: computed(&#39;firstName&#39;, &#39;lastName&#39;, function () {\n    return `${this.firstName} ${this.lastName}`;\n  }),\n\n  updateName(firstName, lastName) {\n    this.set(&#39;firstName&#39;, firstName);\n    this.set(&#39;lastName&#39;, lastName);\n  },\n});\n\nclass NativeClassPerson {\n  firstName = &#39;Steve&#39;;\n  lastName = &#39;Rogers&#39;;\n\n  constructor(firstName, lastName) {\n    this.updateName(firstName, lastName);\n  }\n\n  @computed(&#39;firstName&#39;, &#39;lastName&#39;)\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  updateName(firstName, lastName) {\n    set(this, &#39;firstName&#39;, firstName);\n    set(this, &#39;lastName&#39;, lastName);\n  }\n}\n\n// Make an instance of the class, overriding default values\nlet classicClassSpiderMan = ClassicClassPerson.create({\n  firstName: &#39;Peter&#39;,\n  lastName: &#39;Parker&#39;,\n});\n\nlet nativeClassSpiderMan = new NativeClassPerson(&#39;Peter&#39;, &#39;Parker&#39;);\n</code></pre>\n<p>The reason this is possible is, behind the scenes, <code>computed</code> has <em>always</em> been a decorator.</p>\n<h3 id=\"decorators-before-decorators\">Decorators Before @Decorators</h3>\n<p>You may be familiar with the proposed decorator syntax for JavaScript, but if not the basic gist is that you can &quot;decorate&quot; class fields and methods with additional behavior:</p>\n<pre><code class=\"language-js\">class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  // memoizes the value, which caches it the first time\n  // it is calculated and then always returns the cached value\n  @memo\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n</code></pre>\n<p>There are lots of potential uses for this functionality, such as a <code>@bound</code> decorator that binds a method to the instance (for use in event listeners and such) or an <code>@htmlSafe</code> decorator that sanitizes the return value of a function so it&#39;s safe to add it to the DOM.</p>\n<p>Javascript is far from the first language to have this sort of functionality however. One great example of it is in Python, and one reason I especially like <a href=\"https://realpython.com/primer-on-python-decorators/#simple-decorators\">some examples from their community</a> is they show how you can use decorators <em>without their decorator syntax</em>:</p>\n<pre><code class=\"language-python\"># Given this decorator:\ndef my_decorator(func):\n    def wrapper():\n        print(&quot;Something is happening before the function is called.&quot;)\n        func()\n        print(&quot;Something is happening after the function is called.&quot;)\n    return wrapper\n\n# This function definition with the decorator syntax:\n@my_decorator\ndef say_whee():\n    print(&quot;Whee!&quot;)\n\n# Is the same as doing this without it:\ndef say_whee():\n    print(&quot;Whee!&quot;)\n\nsay_whee = my_decorator(say_whee)\n</code></pre>\n<p>The &quot;decorator pattern&quot; more generically is about taking an input of some type - a function, a class method, a field - and transforming it into something of the same (or similar) type, adding some extra functionality along the way. You don&#39;t need a special syntax to use the decorator pattern, it just makes it a bit more convenient! If you think about it this way, Ember&#39;s <code>computed()</code> function is <em>basically</em> a decorator - it adds caching based on dependent keys to a getter function.</p>\n<p>Leveraging this similarity, we were able to update that decorator functionality to match JavaScript&#39;s newly proposed API, which is how we&#39;re able to have it be compatible between both the classic and current syntax. The added side effect is that the <em>entire</em> Ember ecosystem gets this upgrade all at once, with absolutely no extra work required!</p>\n<h3 id=\"decorators-in-ember-octane\">Decorators in Ember Octane</h3>\n<p>The changes proposed in the <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md\">Decorators RFC</a> boil down to:</p>\n<ul>\n<li><code>@ember/object#computed</code> is now a decorator</li>\n<li>All of the macros available in <code>@ember/object/computed</code>, such as <code>alias</code>, <code>gte</code>, <code>bool</code>, etc. are decorators</li>\n<li><code>@ember/service#inject</code> and <code>@ember/controller#inject</code> are decorators</li>\n<li>A new decorator, <code>@action</code>, has been added for function binding.</li>\n</ul>\n<p>These cover all of the basic functionality provided by the current classic class syntax, with the exception of classic component customization (there&#39;s a mouthful!) and observers/event listeners. Because Ember Octane is introducing a new component class, <code>@glimmer/component</code>, that doesn&#39;t require the element/DOM APIs of classic components, it was decided that decorators for that functionality were not needed in the core of the framework. Likewise, observers and event listeners are not a recommended pattern anymore, so adding decorators for them didn&#39;t make much sense. Instead, users can rely on existing libraries like <code>ember-decorators</code> which cover these use cases if they need them.</p>\n<h3 id=\"putting-it-all-together\">Putting It All Together</h3>\n<p>Alright, with that in mind, let&#39;s take on a bigger, more complete example! This is a component from <a href=\"https://emberobserver.com/\">emberobserver.com</a>, one of the larger components I could find in the application (<a href=\"https://github.com/emberobserver/client/blob/343e7f39b035897e4db0b4be45ca3a1cd238eacc/app/components/addon-source-usages.js\">source here</a>):</p>\n<pre><code class=\"language-js\">import { inject as service } from &#39;@ember/service&#39;;\nimport Component from &#39;@ember/component&#39;;\nimport { computed } from &#39;@ember/object&#39;;\nimport { isEmpty } from &#39;@ember/utils&#39;;\nimport { task } from &#39;ember-concurrency&#39;;\n\nexport default Component.extend({\n  visibleUsageCount: 25,\n\n  showUsages: false,\n\n  usages: null,\n\n  regex: false,\n\n  fileFilter: null,\n\n  codeSearch: service(),\n\n  visibleUsages: computed(&#39;visibleUsageCount&#39;, &#39;usages&#39;, function () {\n    return this.usages.slice(0, this.visibleUsageCount);\n  }),\n\n  moreUsages: computed(&#39;visibleUsageCount&#39;, &#39;usages&#39;, function () {\n    return this.visibleUsageCount &lt; this.usages.length;\n  }),\n\n  fetchUsages: task(function* () {\n    let usages = yield this.codeSearch.usages.perform(this.addon.id, this.query, this.regex);\n    this.set(&#39;usages&#39;, filterByFilePath(usages, this.fileFilter));\n  }).drop(),\n\n  actions: {\n    toggleUsages() {\n      this.toggleProperty(&#39;showUsages&#39;);\n      if (this.showUsages &amp;&amp; this.usages === null) {\n        this.fetchUsages.perform();\n      }\n    },\n\n    viewMore() {\n      this.set(&#39;visibleUsageCount&#39;, this.visibleUsageCount + 25);\n    },\n  },\n});\n\nfunction filterByFilePath(usages, filterTerm) {\n  if (isEmpty(filterTerm)) {\n    return usages;\n  }\n  let filterRegex;\n  try {\n    filterRegex = new RegExp(filterTerm);\n  } catch (e) {\n    return [];\n  }\n  return usages.filter((usage) =&gt; {\n    return usage.filename.match(filterRegex);\n  });\n}\n</code></pre>\n<p>And here is the same component, fully converted to native classes using Ember&#39;s built-in decorators and the and <a href=\"https://github.com/machty/ember-concurrency-decorators\">ember-concurrency-decorators</a> library:</p>\n<pre><code class=\"language-js\">import { inject as service } from &#39;@ember/service&#39;;\nimport Component from &#39;@ember/component&#39;;\nimport { action, computed } from &#39;@ember/object&#39;;\nimport { isEmpty } from &#39;@ember/utils&#39;;\nimport { dropTask } from &#39;ember-concurrency-decorators&#39;;\n\nexport default class AddonSourceUsagesComponent extends Component {\n  visibleUsageCount = 25;\n  showUsages = false;\n  usages = null;\n  regex = false;\n  fileFilter = null;\n\n  @service codeSearch;\n\n  @computed(&#39;visibleUsageCount&#39;, &#39;usages&#39;)\n  get visibleUsages() {\n    return this.usages.slice(0, this.visibleUsageCount);\n  }\n\n  @computed(&#39;visibleUsageCount&#39;, &#39;usages&#39;)\n  get moreUsages() {\n    return this.visibleUsageCount &lt; this.usages.length;\n  }\n\n  @dropTask\n  *fetchUsages() {\n    let usages = yield this.codeSearch.usages.perform(this.addon.id, this.query, this.regex);\n    this.set(&#39;usages&#39;, filterByFilePath(usages, this.fileFilter));\n  }\n\n  @action\n  toggleUsages() {\n    this.toggleProperty(&#39;showUsages&#39;);\n    if (this.showUsages &amp;&amp; this.usages === null) {\n      this.fetchUsages.perform();\n    }\n  }\n\n  @action\n  viewMore() {\n    this.set(&#39;visibleUsageCount&#39;, this.visibleUsageCount + 25);\n  }\n}\n\nfunction filterByFilePath(usages, filterTerm) {\n  if (isEmpty(filterTerm)) {\n    return usages;\n  }\n  let filterRegex;\n  try {\n    filterRegex = new RegExp(filterTerm);\n  } catch (e) {\n    return [];\n  }\n  return usages.filter((usage) =&gt; {\n    return usage.filename.match(filterRegex);\n  });\n}\n</code></pre>\n<p>This is subjectively much cleaner and easier to read, but should still look pretty familiar to long-time Ember users.</p>\n<h3 id=\"native-class-benefits\">Native Class Benefits</h3>\n<p>Maybe you&#39;re not convinced by the new syntax - after all, it&#39;s not <em>that</em> much different than what we have today. There are many other benefits that&#39;ll be coming thanks to native classes, and I&#39;d like to touch on them briefly here:</p>\n<h4 id=\"speed-and-performance-enhancements\">Speed and performance enhancements</h4>\n<p>Relying on native features means that we can drop a significant chunk of Ember&#39;s internal framework code, meaning Ember will be that much lighter overall. In addition, since classes are easier to statically analyze, there may be more benefits unlocked by the VMs themselves in the future, increasing the speedup as time goes on.</p>\n<h4 id=\"shared-documentation-and-tooling\">Shared documentation and tooling</h4>\n<p>The rest of the JavaScript ecosystem is beginning to adopt classes as well, meaning we&#39;ll have a much larger community of shared libraries, documentation, and tooling to rely on. Today, new Ember users have to be taught the details of Ember&#39;s class system, but in the future JavaScript classes will be one of the first chapters in every JS manual, how-to-guide, and bootcamp. This means less time ramping developers up to speed.</p>\n<p>In addition, tooling like IDEs (WebStorm, VSCode), typecheckers (Flow, TypeScript), and documentation generators (ESDoc, TypeDoc) will all benefit from the statically analyzable nature of classes. There&#39;s already lots of work happening to automate more and more tasks, meaning that writing codebases with classes will be that much easier.</p>\n<h4 id=\"true-private-state\">True private state</h4>\n<p>Native class fields also add <em>private</em> fields, which allow us to have truly private instance state for the first time (without using a <code>WeakMap</code>, which is highly unergonomic):</p>\n<pre><code class=\"language-js\">class Person {\n  #firstName;\n  #lastName;\n\n  constructor(firstName, lastName) {\n    this.#firstName = firstName;\n    this.#lastName = lastName;\n  }\n\n  get fullName() {\n    return `${this.#firstName} ${this.#lastName}`;\n  }\n}\n\nlet person = new Person(&#39;Jessica&#39;, &#39;Jones&#39;);\n\nconsole.log(person.fullName); // &#39;Jessica Jones&#39;\nconsole.log(person.#firstName); // ERROR\n</code></pre>\n<h4 id=\"fewer-bugs-and-quirks\">Fewer bugs and quirks</h4>\n<p>There are quite a few quirky behaviors of classic classes:</p>\n<ul>\n<li>Merged and concatenated properties (like <code>classNames</code> on components)</li>\n<li>Shared state between instances (e.g. if you do <code>EmberObject.extend({ foo: [] })</code>)</li>\n<li>Reopening class definitions to define static properties (<code>reopenClass</code>)</li>\n<li>The ability to reopen and redefine class methods and behaviors in general (still possible with native classes, but not nearly as easy)</li>\n<li>Mixin behavior in general, especially inheritance and <code>super</code></li>\n</ul>\n<p>All of these issues have been addressed in native classes. Some functionality was not needed, and other functionality was added to ensure that strange, counterintuitive behavior does not occur.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>That&#39;s all I have for today, I hope you&#39;re looking forward to being able to use native class syntax in Ember as much as I am! Tune in next week for a break down of the changes to Ember&#39;s templating syntax, including <code>&lt;AngleBracketInvocation&gt;</code> and <code>@namedArgs</code>!</p>\n",
        "title": "Coming Soon in Ember Octane: Native(nbsp)Classes",
        "tagline": ""
    },
    {
        "slug": "four-eras-of-javascript-framework",
        "published": "2022-04-25",
        "updated": "2022-04-25",
        "body": "<p>I started coding primarily in JavaScript back in 2012. I had built a PHP app for a local business from the ground up, a basic CMS and website, and they decided that they wanted to rewrite it and add a bunch of features. The manager of the project wanted me to use .NET, partially because it&#39;s what he knew, but also because he wanted it to feel like a native application - no page refreshes or long pauses between actions. After a bit of research and prototyping, I convinced him that we could do the same thing with the web, using one of the brand new JS frameworks that were just starting to come out.</p>\n<p>The first framework I chose was actually Angular 1. I built a decent chunk of the app, with a FuelPHP backend, before I ran into some issues with the community router - it would flicker whenever you rerendered subroutes/outlets, and really it just didn&#39;t feel like it had been designed with that use case in mind. Someone recommended Ruby on Rails + Ember to me, and after giving it a shot I decided it worked pretty well. I liked the philosophy of both frameworks, liked the communities, and overall it was very productive compared to the alternatives at the time.</p>\n<p>A lot has changed since then - frameworks have come, gone, and evolved massively. The idea that you could build apps in JavaScript, in the browser, went from somewhat fringe to a standard practice. And the infrastructure that we build on has completely changed, enabling a host of new possibilities.</p>\n<p>There&#39;s also been a fair share of competition and conflict between ideas in that time. I think most of us who&#39;ve been in the frontend space for a while have probably been in some debates about... well, everything. Which JavaScript framework to use, how to write your CSS, functional vs object-oriented programming, how best to manage state, which build system or tool was the most flexible and the fastest, and so on. Looking back, it&#39;s funny to me how often we were arguing about the wrong things and missing the larger patterns, but of course that&#39;s the benefit of hindsight.</p>\n<p>So I wanted to do a retrospective, looking back at the last few decades of JavaScript development and at how far we&#39;ve come. I think we can roughly divide it into four main eras:</p>\n<ol>\n<li>The Before Times</li>\n<li>The First Frameworks</li>\n<li>Component-Centric View Layers</li>\n<li>Full-stack Frameworks (<em>← We&#39;re here</em>)</li>\n</ol>\n<p>Each era had its own main themes and central conflicts, and in each one we learned key lessons as a community and advanced, slowly but surely.</p>\n<p>Today the debates rage on: Has the web grown too bloated? Does the average website really <em>need</em> to be written in React? Should we even use JavaScript at all? I don&#39;t think we can see into the future here, and in the end I suspect we&#39;ll probably discover that once again, we were talking past each other and missing the bigger picture. But maybe getting a bit of perspective from the past will help us to move forward.</p>\n<h2 id=\"the-before-times\">The Before Times</h2>\n<hr class=\"mt-4\"/>\n\n<p>JavaScript was first released in 1995. Like I mentioned above, I started writing JS in 2012, almost two decades later, near the beginning of the era I&#39;m dubbing the First Frameworks. As you can imagine, I&#39;m probably going to gloss over a lot of history here, and this era could probably be broken down into many sub-eras in their own right, each dominated by its own patterns and libraries and build tools and so-on.</p>\n<p>That said, I can&#39;t write about what I didn&#39;t experience. By the time I started writing frontend apps, there was a new generation of frameworks that had just started to reach maturity: Angular.js, Ember.js, Backbone, and more.</p>\n<p>Prior to these, the state of the art had been libraries like jQuery and MooTools. These libraries were very important in their time - they helped to smooth over the differences between the way that browsers implemented JavaScript, which were <em>very</em> significant. For instance, Internet Explorer implemented eventing completely differently than Netscape - bubbling events vs capturing events. That&#39;s why the standard we have today implemented both, ultimately, but before that you needed to use libraries to write code that would work in both browsers. These libraries were primarily used to make small, self-contained UI widgets. The majority of application business logic still took place via forms and standard HTTP requests - rendering HTML on the server and serving it up to the client.</p>\n<p>There also weren&#39;t many build tools to speak of in this era, at least that I was aware of. JavaScript didn&#39;t have modules yet (at least not standard ones), so there wasn&#39;t any way to import code. Everything was global, and it was pretty difficult to organize things.</p>\n<p>In this environment, it&#39;s understandable that JS was generally seen as a toy language and not something you&#39;d write a full app in. The most common thing you would do was include jQuery, throw together some scripts for a few UI widgets, and call it a day. As time went on and XHR was introduced and popularized, people started to put parts of their UI flow into a single page, especially for complex flows that required multiple back and forth interactions between the client and the server, but the majority of the app stayed firmly on the server.</p>\n<p>This contrasted pretty significantly with mobile apps when they started to hit the scene. From the get go, mobile apps on iOS and Android were full applications written in Serious Languages™ like Objective C and Java. Moreover, they were fully API driven - all of the UI logic lived on the device, and communication with the server was purely in data formats. This resulted a much better UX and mobile apps exploded in popularity, leading quite directly to where we are today with debates about which is better, mobile or the web.</p>\n<p>Doing all of <em>that</em> with JavaScript was seen as ludicrous at first. But as time went on, applications started to get more ambitious. Social networks added chat and DMs and other real-time features, Gmail and Google Docs showed that desktop-equivalent experiences <em>could</em> be written in the browser, and more and more companies were turning to writing web apps for more and more use cases, since the web worked everywhere and was easier to maintain over time. This pushed the envelope forward - it was now clear that JS <em>could</em> be used to write non-trivial apps.</p>\n<p>Doing so, however, was the hard part. JavaScript did not have all the features it has today - like I said, everything was global and you generally had to manually download and add every external library to your static assets folder. NPM didn&#39;t yet exist, modules weren&#39;t a thing, and JS didn&#39;t have half the features it has today. For the most part, every app was bespoke, with a different setup of plugins on every page, a different system for managing state and rendering updates in every plugin. To solve these issues, the very first JavaScript frameworks started to emerge.</p>\n<h2 id=\"the-first-frameworks\">The First Frameworks</h2>\n<hr class=\"mt-4\"/>\n\n<p>Around the late 2000&#39;s and early 2010&#39;s the first JS frameworks specifically designed for writing full client applications started to come out. A few of the notable frameworks of this era were:</p>\n<ol>\n<li><a href=\"https://backbonejs.org/\">Backbone.js</a></li>\n<li><a href=\"https://angularjs.org/\">Angular 1</a></li>\n<li><a href=\"https://knockoutjs.com/\">Knockout.js</a></li>\n<li><a href=\"https://sproutcore.com/\">SproutCore</a></li>\n<li><a href=\"https://emberjs.com/\">Ember.js</a></li>\n<li><a href=\"https://www.meteor.com/\">Meteor.js</a></li>\n</ol>\n<p>There are, of course, plenty of others, and probably some that were even bigger in some circles. These are the ones that I remember, mostly because I used them to prototype or build things and they were relatively popular.</p>\n<p>This was a generation of frameworks that were setting out into uncharted territory. On the one hand, what they were trying to do was highly ambitious, and plenty of people thought it would never really work. There were many detractors who thought that single-page JS apps (SPAs) were fundamentally worse, and in a lot of ways they were right - client side rendering meant that bots couldn&#39;t crawl these pages easily, and that users would have to wait seconds for apps to even start to paint. A lot of these apps were accessibility nightmares, and if you turned off JavaScript they wouldn&#39;t work at all.</p>\n<p>On the other hand, we had no experience building full apps in JS, collectively, and so there were tons of competing ideas about the best ways to do it. Most frameworks tried to mimic was was popular on other platforms, so almost all of them ended up being some iteration of Model-View-*: Model-View-Controller, Model-View-Producer, Model-View-ViewModel, etc. None of these really ended up working out though in the long run - they weren&#39;t particularly intuitive and they got really complicated really quickly.</p>\n<p>This was also an era when we really began to experiment with how to <em>compile</em> JavaScript applications. Node.js was released in 2009, with NPM following it in 2010, introducing packages to (server-side) JavaScript. CommonJS and AMD competed for how best to define JS modules, and build tools like Grunt, Gulp, and Broccoli competed over how to put those modules together into a shippable final product. For the most part these were very general task-runner-like tools, which could really build anything and just <em>happened</em> to be building JavaScript - and HTML, and CSS/SASS/LESS, and the many other things that go into a web app.</p>\n<p>We learned a lot of things from this era, however; important fundamental lessons, including:</p>\n<ul>\n<li>URL-based routing is fundamental. Apps that don&#39;t have it break the web, and it needs to be thought about from the beginning in a framework.</li>\n<li>Extending HTML via templating languages is a powerful abstraction layer. Even if it can be at times a bit clunky, it makes keeping your UI in sync with your state much easier.</li>\n<li>Performance for SPAs was <em>hard</em>, and the web has a lot of extra constraints that native apps do not. We need to ship all of our code over the wire, have it JIT, and then run just to get our apps started, whereas native apps are already downloaded and compiled. That was a <em>massive</em> undertaking.</li>\n<li>JavaScript had a lot of issues as a language, and it really needed to be improved to make things better - frameworks couldn&#39;t do it alone.</li>\n<li>We absolutely needed better build tools, modules, and packaging in order to write apps at scale.</li>\n</ul>\n<p>Overall, this era was fruitful. Despite the shortcomings, the benefits of separating clients from APIs were massive as apps grew in complexity, and in many cases the resulting UX was phenomenal. If things were different, this era may have continued on and we would still be iterating on MV* style ideas to this day.</p>\n<p>But then an asteroid came out of nowhere, smashing the existing paradigms apart and causing a minor extinction event that propelled us into the next era - an asteroid named React.</p>\n<h2 id=\"component-centric-view-layers\">Component-Centric View Layers</h2>\n<hr class=\"mt-4\"/>\n\n<p>I don&#39;t think React invented components, but to be honest I&#39;m not quite sure where they first came from. I know there&#39;s prior art going back to at least XAML in .NET, and web components were also beginning to develop as a spec around then. Ultimately it doesn&#39;t really matter - once the idea was out there, every major framework adopted it pretty quickly.</p>\n<p>It made complete sense in hindsight - extend HTML, reduce long-lived state, tie the JS business logic directly to the template (be that JSX or Handlebars or Directives). Component-based applications removed most of the abstractions necessary to get things done, and also remarkably simplified the lifecycle of code - everything was tied to the lifecycle of the component instead of the app, and that meant you had much less to think about as a developer.</p>\n<p>However, there was another shift at the time: frameworks started touting themselves as &quot;view-layers&quot; instead of full-fledged frameworks. Instead of solving all of the problems needed for a frontend app, they would focus on just solving rendering problems. Other concerns, like routing, API communication, and state management, were left up to the user. Notable frameworks from this era include:</p>\n<ol>\n<li><a href=\"https://reactjs.org/\">React.js</a></li>\n<li><a href=\"https://vuejs.org/\">Vue.js</a></li>\n<li><a href=\"https://svelte.dev/\">Svelte</a></li>\n<li><a href=\"https://polymer-library.polymer-project.org/3.0/docs/devguide/feature-overview\">Polymer.js</a></li>\n</ol>\n<p>And many, many others. Looking back now, I think that this was a popular framing for this second generation of frameworks because it did do two main things:</p>\n<ol>\n<li>It reduced scope dramatically. Rather than trying to solve all these problems up front, the core of the framework focused on rendering, and many different ideas and directions could be explored in the wider ecosystem for other functionality. There were plenty of terrible solutions, but there were also good ones, paving the way for the next generation to pick the best ideas from the cream of the crop.</li>\n<li>It made it much easier to adopt them. Adopting a full framework that took over your entire web page pretty much meant rewriting most your app, which was a non-starter with existing server-side monoliths. With frameworks like React and Vue, you could drop a little bit of them into an existing app one widget or component at a time, allowing developers to incrementally migrate their existing code.</li>\n</ol>\n<p>These two factors led to second-gen frameworks growing rapidly and eclipsing the first-gen ones, and from a distance it all seems to make a lot of sense and is a logical evolution. But being in the midst of it was quite a frustrating experience at the time.</p>\n<p>For one thing, this was not the framing that was encountered very often when debating which framework to use at work, or if we should rewrite our apps. Instead, very often it was &quot;it&#39;s faster!&quot; or &quot;it&#39;s smaller!&quot; or &quot;it&#39;s all you need!&quot;. There was also the debate over functional programming vs object-oriented programming, with a lot of folks pushing FP as the solution to all of our problems. And to be fair, all of these things were true: View-layer-only-frameworks <em>were</em> smaller (at first) and faster (at first) and all you needed (if you built or stitched together a lot of things yourself). And absolutely, functional programming patterns solved a <em>ton</em> of problems that plagued JavaScript, and I think that on average JS has gotten a lot better because of them.</p>\n<p>The reality, however, was that there are no silver bullets - there never are. Apps still grew enormous and bloated and complicated, state was still hard to manage, and fundamental problems like routing and SSR still needed to be solved. And for a lot of us, it seemed like what people wanted was to ditch the solution that was <em>trying</em> to solve all of those problems for one that left that exercise up to the reader. In my experience, this was also universally within engineering orgs which would gladly accept this change in order to ship a new product or feature, and then fail to <em>fund</em> the time needed to fully develop all of that extra functionality.</p>\n<p>The result (in my experience, more often than not) was homegrown frameworks built around these view layers that were themselves bloated, complicated, and very difficult to work with. Many of the problems that people have with SPAs I think come from this fragmented ecosystem, which came right at the time when SPA usage was exploding. I still often come across a new site that fails to properly do routing or handle other small details well, and it definitely is frustrating.</p>\n<p>But on the other hand, the existing full-service first-gen frameworks weren&#39;t doing too well at solving these problems either. Partially, this was due to a lot of tech-debt baggage. The first generation of frameworks were built before ES6, before modules, before Babel and Webpack, before we&#39;d figured out <em>so</em> many things. Evolving them iteratively was extremely difficult (I know this all too well from my experience as a former-Ember core team member), and rewriting them entirely, like Angular did with Angular 2, killed a ton of their community&#39;s momentum. So, developers were in between a rock and a hard place when it came to JavaScript frameworks - either choose an all-in-one solution that was starting to show its age, or jump into the free-for-all and DIY half your framework, hoping for the best.</p>\n<p>Like I said, at the time this was deeply frustrating, but a ton of innovation came out of all of it in the end. The JavaScript ecosystem advanced really quickly as these frameworks figured out their best practices, and a few other key changes happened:</p>\n<ul>\n<li>Transpilers like Babel became the norm, and helped to modernize the language. Rather than having to wait years for features to standardize, they could be used today, and the language itself started adding features at a much faster and more iterative pace.</li>\n<li>ES Modules were standardized and allowed us to finally start building modern build tools like Rollup, Webpack, and Parcel around them. Import based bundling slowly became the norm, even for non-JS assets like styles and images, which dramatically simplified configuration for build tools and allowed them to become leaner, faster, and overall better.</li>\n<li>The gap between Node and web standards closed slowly but surely as more and more APIs were standardized. SSR started to become a real possibility, and then something every serious app was doing, but it was still a somewhat bespoke setup each time.</li>\n<li>Edge computing was released, giving JavaScript based server apps the benefits of SPAs in terms of distribution/response times (SPAs could previously generally <em>start</em> loading faster due to being static files on a CDN, even if it took them longer to fully load and render in the end).</li>\n</ul>\n<p>By the end of this era, some problems still remained. State management and reactivity were (and are) still thorny problems, even though we had much better patterns than before. Performance was still a difficult problem, and even though the situation was improving, there were still many, many bloated SPAs out there. And the accessibility situation had improved, but it was (and is) still oftentimes an afterthought for many engineering orgs. But these changes paved the way for the next generation of frameworks, which I would say we are entering just now.</p>\n<h2 id=\"full-stack-frameworks\">Full-Stack Frameworks</h2>\n<hr class=\"mt-4\"/>\n\n<p>This last era of frameworks has really snuck up on me, personally. I think that&#39;s because I&#39;ve spent the last 4 years or so deep in the internals of Ember&#39;s rendering layer, trying to clean up the aformentioned tech-debt that&#39;s (still) affecting it as a first-gen framework. But it&#39;s also because it was much more subtle, as all of these third-gen frameworks are built around the view-layer frameworks of the previous generation. Notable entries include:</p>\n<ol>\n<li><a href=\"https://nextjs.org/\">Next.js</a> (React)</li>\n<li><a href=\"https://nuxtjs.org/\">Nuxt.js</a> (Vue)</li>\n<li><a href=\"https://remix.run/\">Remix</a> (React)</li>\n<li><a href=\"https://kit.svelte.dev/\">SvelteKit</a> (Svelte)</li>\n<li><a href=\"https://www.gatsbyjs.com/\">Gatsby</a> (React)</li>\n<li><a href=\"https://astro.build/\">Astro</a> (Any)</li>\n</ol>\n<p>These frameworks started up as the view-layers matured and solidified. Now that we all agreed that components were the core primitive to build on top of, it made sense to start standardizing other parts of the app - the router, the build system, the folder structure, etc. Slowly but surely, these meta-frameworks started to build up the same functionality that the all-in-one solutions of the first generation offered out of the box, picking the best patterns from their respective ecosystems and incorporating them as they matured.</p>\n<p>And then they went a step further.</p>\n<p>Up until this point, SPAs had been exclusively focused on the client. SSR was something every framework aspired to solve, but only as an optimization, a way to get something rendered that would ultimately be replaced once the megabytes of JS had finally loaded. Only one first-gen framework dared to think bigger, Meteor.js, but its idea of &quot;isomorphic JS&quot; never really took off.</p>\n<p>But that idea was revisited as apps grew in size and complexity. We noticed that it was actually really useful to have a backend and frontend paired together, so that you could do things like hide API secrets for certain requests, modify headers when a page was returned, proxy API requests. And with Node and Deno implementing more and more web standards, with the gap between server-side JS and client-side JS shrinking every year, it started to seem like it wasn&#39;t such a crazy idea after all. Combine this with edge-computing and amazing tooling to go with it, and you have some incredible potential.</p>\n<p>This latest generation of frameworks makes full use of that potential, melding the client and the server together seamlessly, and I cannot stress enough how amazing this feels. I have, in the past 9 months of working with SvelteKit, sat back more times than I can count and said to myself &quot;this is the way we should have always done it.&quot;</p>\n<p>Here are just a few of the tasks I&#39;ve had recently that were made <em>incredibly</em> easy by this setup:</p>\n<ul>\n<li>Adding server-side OAuth to our applications so that auth tokens never leave the server, along with an API proxy that adds the tokens whenever a request is sent to our API.</li>\n<li>Proxying certain routes directly to our CDN so we can host static HTML pages built in any other framework, allowing users to make their own custom pages (a service we provide for some of our clients).</li>\n<li>Adding several different one-off API routes when we needed to use an external service that required a secret key (no need to add a whole new route to our APIs and coordinate with the backend folks).</li>\n<li>Moving our usage of LaunchDarkly server-side so that we can load less JS and incur lower costs overall.</li>\n<li>Proxying our Sentry requests through a backend route so we can catch errors that would otherwise go unreported due to ad-blockers.</li>\n</ul>\n<p>And this is just the tip of the iceberg. There are really so many cool things about this model, one of the biggest ones being how it is revitalizing the idea of <a href=\"https://en.wikipedia.org/wiki/Progressive_enhancement\">progressive enhancement</a>, using the combined nature of the server and client to allow the client to <em>fallback</em> to basic HTML + HTTP in cases where the user has disable JavaScript. I had fully given up on this practice myself when I began working on SPAs, assuming that they were the future, but it is really cool that we could possibly see a world where it makes a comeback.</p>\n<p>These are the new features that, experientially, have me classifying these frameworks as a new generation. Problems that previously were either difficult or impossible to solve are now trivial, just a change to a little bit of response handling logic. Solid performance and UX is available out of the box, without any extra config needed. Instead of standing up entire new services, we&#39;re able to add a few extra endpoints or middlewares as needed. It has been life changing.</p>\n<p>I think that this generation has also addressed some of the main tension points between the first-gen and second-gen frameworks and their users. It started with the shift to zero-config terminology, but I think ultimately it was driven by the ecosystems around the second-gen frameworks maturing and stabilizing, and it&#39;s been a cultural shift. Third-gen frameworks are now trying to be all-in-one solutions again, trying to solve all of the fundamental problems that we need to solve as frontend devs - not just rendering.</p>\n<p>Now more than ever it feels like the community is aligned in solving <em>all</em> of the many problems that have plagued SPAs, and importantly, solving them <em>together</em>.</p>\n<h2 id=\"where-do-we-go-next\">Where do we go next?</h2>\n<hr class=\"mt-4\"/>\n\n<p>Overall, I think the JavaScript community is heading in the right direction. We are finally developing mature solutions that can build full apps from the ground up, solutions that are not &quot;just a view-layer&quot;. We&#39;re finally starting to compete on the same playing field as SDKs for native apps, providing a full toolkit out of the box. We still have a lot of work to do here. Accessibility has long been an afterthought in the SPA space, and outside of GraphQL I still think that the data story could use some work (like it or not, much of the web still runs on REST). But the trend is in the right direction, and if we keep moving toward shared solutions I think we could solve these problems in a better way than ever before.</p>\n<p>I&#39;m also still excited about the potential behind bringing these patterns even further up, into the web platform itself. Web components are still quietly iterating, working on solutions to issues like SSR and getting rid of global registration, which would make them more compatible with these third-gen frameworks. In the other direction, WebAssembly could iterate on this model in an incredible way. Imagine being able to write a full-stack framework in <em>any</em> language. Isomorphic Rust, Python, Swift, Java, etc. could finally reduce the barrier between frontends and backends to almost zero - just a bit of HTML templating at the edge of your system (which ironically brings us pretty much full circle, though with a much better UX).</p>\n<p>My biggest hope here is that we&#39;re moving past the era of fragmentation, of every-day-a-new-JS-framework. Freedom and flexibility have bred innovation, but they&#39;ve also resulted in a web experience that is messy, disjointed, and oftentimes fundamentally broken. And it makes sense that when developers have to choose between fifty-odd options and cobble them together themselves, with limited resources and tight deadlines, that this is the experience we would see. Some apps are brilliantly fast, consistent, reliable, and fun to use, while others are frustrating, confusing, slow, and broken.</p>\n<p>If we can give devs easier to use tools that do-the-right-thing-by-default, maybe the average website will get a bit better, the average experience a bit smoother. It won&#39;t fix every site - no amount of code can solve for bad UX design. But it would lay a common foundation, so every site starts out a little bit better, and every dev has a little more time to focus on the other things.</p>\n",
        "title": "Four Eras of JavaScript Frameworks",
        "tagline": ""
    },
    {
        "slug": "",
        "published": ".DS_Store",
        "updated": ".DS_Store",
        "body": "<p>\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000m\u0000o\u0000k\u0000a\u0000_\u0000p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0014\u0000t\u0000h\u0000e\u0000_\u0000m\u0000o\u0000k\u0000a\u0000_\u0000p\u0000o\u0000t\u0000 \u0000c\u0000o\u0000p\u0000y\u0000.\u0000m\u0000dIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000�\u0000\u0000\u0000;������\u0000\u0000\u0000\u0000\u0000\u000f\u0000t\u0000h\u0000e\u0000_\u0000m\u0000o\u0000k\u0000a\u0000_\u0000p\u0000o\u0000t\u0000.\u0000m\u0000dIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.������\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000</p>\n"
    }
]